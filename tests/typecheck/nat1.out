let nat = [C: *] [_: C] [_: [_: C] C] C in 
let one = (λC: *) (λz: C) (λf: [_: C] C) (f z) in 
let idT = [t: *] [x: t] t in 
let id = (λt: *) (λx: t) x in 
let fn = (id idT) in 
(((one idT) id) fn)
{nat} typecheck_single_term [C: *] [_: C] [_: [_: C] C] C
Type: *
{one} typecheck_single_term (λC: *) (λz: C) (λf: [_: C] C) (f z)
Type: [C: *] [z: C] [f: [_: C] C] C
{idT} typecheck_single_term [t: *] [x: t] t
Type: *
{id} typecheck_single_term (λt: *) (λx: t) x
Type: [t: *] [x: t] t
{fn} typecheck_single_term ((λt: *) (λx: t) x [t: *] [x: t] t)
Type: [x: [t: *] [x: t] t] [t: *] [x: t] t
typecheck_single_term ((((λC: *) (λz: C) (λf: [_: C] C) (f z) [t: *] [x: t] t) (λt: *) (λx: t) x) (λx: [t: *] [x: t] t) x)
Type: [t: *] [x: t] t
Value: (λt: *) (λx: t) x
